<?php
/********************************************************************************
 * Описание и примеры использования системы сущностей.
 *
 * Автор: Демко Игорь
 * Контакты: idemko1@yandex.ru
 * Лицензия: GPL 2.0
 *
 * Описание:
 * Система предназначена для управление сущностями, информация о которых хранится в базе данных.
 * По сути это некоторый слой, который связывает данные и бизнес-логику вашего приложения.
 * Полная изоляция SQL кода. Для сохранения, добавления, удаления, обновления данных сущностей
 * не требуется написание кода. Необходимо лишь задать основную модель данных, по которой система будет работать
 * и определять связи между сущностями.
 * Основные определения, используемые в системе:
 *  Модель данных - в контексте этого решения определяет собой набор правил, по которым выбираются данные из Базы данных.
 *
 *  Справочник - модель данных, которая представляет собой некоторые данные, изменение которых происходит крайне редко.
 *  В основном такие данные являются статическими и используются для связи по ключам (Foregin key).
 *
 *  Таблицы - модель данных, по своей сути не отличается от обычных таблиц Базы данных. Нужна для хранения часто изменяющихся
 *  данных. Существует возможность создавать связи с другими таблицами или справочниками.
 *
 *  Источник данных или Сущность - модель данных, которая является полноценной сущностью вашей системы.
 *  Определяется путем объединения таблиц и справочников.
 *
 * Начало работы:
 * Для того, чтобы начать работать с этой системой вам необходимо сначала определить модель данных, по которой
 * система будет работать. При первом запуске модели, все таблицы, справочники буду созданы и записаны в отдельный
 * конфигурационный файл, который можно сохранить для дальнейшего переноса схемы данных.
 *
 *******************************************************************************/

/********************************************************************************
 * Создание экземпляра системы сущностей
 *******************************************************************************/
$settings = [
	'settings' => [
		// Настройки таблиц
		'tables' => [
			'prefix' => 'ent_'
		],

		// Драйвер для подключения к БД
		'driver' => [
			'PDO' => [
				'type' => 'mysql',
				'host' => '127.0.0.1',
				'database' => 'entity',
				'user' => 'root',
				'password' => '',
				'charset' => 'utf8'
			]
		]
	]
];

$entity = new Entity($settings);

/********************************************************************************
 * Создание справочника
 *******************************************************************************/

$dict = $entity->prepareTable('user_groups');       // Подготовка справочника
$dict->name('Группы пользователй');                 // Установка имени (имя используется внутри вашей системы)
$dict
	->definition('id', 'integer', 11, 'Индекс группы')                                         // Параметр типа INT(11) под именем id и описанием
	->definition('name', 'varchar', 255, 'Наименование группы пользователей')    // Параметр типа VARCHAR(255) под именем name и описанием
	->definition('date', 'datetime', false, 'Дата создания группы');    // Параметр типа DATE под именем date и описанием

/**
 * При выборке данных из справочника dict_example, будет вызываться пользовательская функция, которая в свою очередь создает
 * экземпляр нужного вам объекта. Таким образом вы всегда получаете тот объект, который нужен вашей бизнес-логике.
 */
$dict->dataInstance(function($data) {
	// TODO DictItemData должен реализововать интерфейс ****.
	return new DictItemData($data[0], $data[1], $data[2], $data[3]);
});

$entity->executeDictionary($dict);   // Создаем справочник и регистрируем его в системе

/********************************************************************************
 * Создание таблицы со внешними связями.
 *******************************************************************************/

$table = $entity->prepareTable('users');
$table->name('Пользователи');
$table
	->definition('id', 'integer', 11, 'ID пользователя')        // Параметр типа INT(11) под именем id и описанием
	->definition('name', 'varchar', 255, 'Имя пользователя')    // Параметр типа VARCHAR(255) под именем name и описанием
	->definition('birthday', 'date', false, 'Дата рождения')    // Параметр типа DATE под именем birthday и описанием
	->defenitionKey('group', 'user_group', 'name');             // Связываем поле table_example.dict_name с полем dict_example.name

/**
 * При выборке данных из таблицы table_example, будет вызываться пользовательская функция, которая в свою очередь создает
 * экземпляр нужного вам объекта. Таким образом вы всегда получаете тот объект, который нужен вашей бизнес-логике.
 */
$table->dataInstance(function($data) {
	// TODO TableItemData должен реализововать интерфейс ****.
	return new TableItemData($data[0], $data[1], $data[2], $data[3], $data[4]);
});

$entity->executeTable($table);   // Создаем таблицу и регистрируем ее в системе


/********************************************************************************
 * Создание сущности.
 * Сущность не хранится в базе как таковая, она состоит из составных частей: справочники, таблицы.
 *******************************************************************************/
//
//$ent = $entity->prepareEntity('user');
//$ent
//	->con('users');